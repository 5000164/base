type Query {
  tasks: QueryTasks!
  templates: QueryTemplates!
  taskTracks: QueryTaskTracks!
}

type Mutation {
  tasks: MutationTasks!
  templates: MutationTemplates!
  taskTracks: MutationTaskTracks!
}

# Tasks

type QueryTasks {
  all: [TasksTask!]!
  scheduled(scheduledDate: Float!): [TasksTask!]!
  recorded(recordedDate: Float!): [TasksTask!]!
}

type MutationTasks {
  add: Boolean
  addWithScheduledDate(scheduledDate: Float!): Boolean
  update(taskId: Int!, name: String, estimate: Int): Boolean
  changeScheduledDate(taskId: Int!, scheduledDate: Float): Boolean
  complete(taskId: Int!): Boolean
  archive(taskId: Int!): Boolean
  delete(taskId: Int!): Boolean
  import(templateId: Int!): Boolean
  importWithScheduledDate(templateId: Int!, scheduledDate: Float!): Boolean
  updateTasksOrder(updatedTasks: [TasksUpdatedTask!]!): Boolean
}

type TasksTask {
  taskId: Int!
  name: String!
  status: Int!
  estimate: Int
  scheduledDate: Float
  statusChangedAt: Float
  previousId: Int
  nextId: Int
}

input TasksUpdatedTask {
  taskId: Int!
  previousId: Int
  nextId: Int
}

# TaskTracks

type QueryTaskTracks {
  recorded(recordedDate: Float!): [TaskTracksTaskTrack!]!
  working: [TaskTracksTaskTrack!]!
}

type MutationTaskTracks {
  start(taskId: Int!): Boolean
  stop(taskTrackId: Int!): Boolean
  stopByTaskId(taskId: Int!): Boolean
  update(taskTrackId: Int!, startAt: Float, stopAt: Float): Boolean
  delete(taskTrackId: Int!): Boolean
}

type TaskTracksTaskTrack {
  taskTrackId: Int!
  task: TaskTracksTask!
  startAt: Float!
  stopAt: Float
}

type TaskTracksTask {
  taskId: Int!
  name: String!
}

# Templates

type QueryTemplates {
  all: [TemplatesTemplate!]!
  tasks(templateId: Int!): [TemplatesTemplateTask!]!
}

type MutationTemplates {
  add: Boolean
  update(templateId: Int!, name: String): Boolean
  delete(templateId: Int!): Boolean
  addTask(templateId: Int!): Boolean
  updateTask(templateTaskId: Int!, name: String, estimate: Int): Boolean
  deleteTask(templateTaskId: Int!): Boolean
  updateTemplateTasksOrder(
    updatedTemplateTasks: [TemplatesUpdatedTemplateTask!]!
  ): Boolean
}

type TemplatesTemplate {
  templateId: Int!
  name: String!
}

type TemplatesTemplateTask {
  templateTaskId: Int!
  name: String!
  estimate: Int
  previousId: Int
  nextId: Int
}

input TemplatesUpdatedTemplateTask {
  templateTaskId: Int!
  previousId: Int
  nextId: Int
}
